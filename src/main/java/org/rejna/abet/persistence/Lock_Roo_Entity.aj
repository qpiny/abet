// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.rejna.abet.persistence;

import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import javax.persistence.Version;
import org.rejna.abet.persistence.Lock;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Lock_Roo_Entity {
    
    declare @type: Lock: @Entity;
    
    declare @type: Lock: @Table(name = "Locks");
    
    @PersistenceContext
    transient EntityManager Lock.entityManager;
    
    @Version
    @Column(name = "version")
    private Integer Lock.version;
    
    public Lock.new() {
        super();
    }

    public Integer Lock.getVersion() {
        return this.version;
    }
    
    public void Lock.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional
    public void Lock.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Lock.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Lock attached = Lock.findLock(this.lockName);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Lock.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Lock.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Lock Lock.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Lock merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager Lock.entityManager() {
        EntityManager em = new Lock().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Lock.countLocks() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Lock o", Long.class).getSingleResult();
    }
    
    public static List<Lock> Lock.findAllLocks() {
        return entityManager().createQuery("SELECT o FROM Lock o", Lock.class).getResultList();
    }
    
    public static Lock Lock.findLock(String lockName) {
        if (lockName == null || lockName.length() == 0) return null;
        return entityManager().find(Lock.class, lockName);
    }
    
    public static List<Lock> Lock.findLockEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Lock o", Lock.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
